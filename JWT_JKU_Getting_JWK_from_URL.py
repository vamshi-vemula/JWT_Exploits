import OpenSSL
import base64
import json
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

#Genrating private key for RSA -> Public Key
key=OpenSSL.crypto.PKey()
key.generate_key(type=OpenSSL.crypto.TYPE_RSA,bits=2048)
priv=key.to_cryptography_key()
pub=priv.public_key()

# Getting n,e from public key
e=pub.public_numbers().e
n=pub.public_numbers().n

# Printing e,n
print("e")
print(base64.urlsafe_b64encode((e).to_bytes((e).bit_length()//8+1,byteorder="big")).decode('utf8').rstrip("="))
print("n")
print(base64.urlsafe_b64encode((n).to_bytes((n).bit_length()//8+1,byteorder="big")).decode('utf8').rstrip("="))


#Header
header= {
            "typ": "JWT",
            "alg": "RS256",
            "jku": "https://fa0c-122-173-136-54.in.ngrok.io/jwks.json"
        }

# New Payload
payload= "eyJ1c2VyIjoiYWRtaW4ifQ"

# Header + payload
data= base64.urlsafe_b64encode(bytes(json.dumps(header),encoding='utf8')).decode('utf8').rstrip("=")+"."+payload

# Getting signature with private key
sig=priv.sign(bytes(data,encoding="utf8"),algorithm=hashes.SHA256(),padding=padding.PKCS1v15())

# Printing new JWT Token with base64 encoded signature
print(data+"."+base64.urlsafe_b64encode(sig).decode("utf8").rstrip("="))