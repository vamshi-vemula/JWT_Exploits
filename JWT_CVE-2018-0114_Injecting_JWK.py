import OpenSSL
import base64
import json
import hashlib
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

#Genrating private key for RSA -> Public Key
key=OpenSSL.crypto.PKey()
key.generate_key(type=OpenSSL.crypto.TYPE_RSA,bits=2048)
priv=key.to_cryptography_key()
pub=priv.public_key()

# Getting n,e from public key
e=pub.public_numbers().e
n=pub.public_numbers().n

# Header JSON Object without n,e
header= {
			"alg":"RS256",
			"jwk":  {
			          "kty":"RSA",
			          "kid":"bilbo.baggins@hobbiton.example",
			          "use":"sig"
			        }
		}


# Adding e, n to header json object
header["jwk"]["e"]=base64.urlsafe_b64encode((e).to_bytes((e).bit_length()//8+1,byteorder="big")).decode('utf8').rstrip("=")
header["jwk"]["n"]=base64.urlsafe_b64encode((n).to_bytes((n).bit_length()//8+1,byteorder="big")).decode('utf8').rstrip("=")

# New Payload
payload= "YWRtaW4"

# Header + payload
data= base64.urlsafe_b64encode(bytes(json.dumps(header),encoding='utf8')).decode('utf8').rstrip("=")+"."+payload

# Getting signature with private key
sig=priv.sign(bytes(data,encoding="utf8"),algorithm=hashes.SHA256(),padding=padding.PKCS1v15())

# Printing new JWT Token with base64 encoded signature
print(data+"."+base64.urlsafe_b64encode(sig).decode("utf8").rstrip("="))